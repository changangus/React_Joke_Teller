{"version":3,"sources":["Joke.js","JokeList.js","App.js","serviceWorker.js","index.js"],"names":["Joke","props","getColor","bind","getEmoji","this","votes","className","onClick","upvote","style","border","downvote","joke","Component","JokeList","state","jokes","JSON","parse","window","localStorage","getItem","loading","seenJokes","Set","text","handleVote","handleClick","getJokes","length","numJokes","axios","get","headers","Accept","res","has","data","console","log","push","id","uuidv4","setState","setItem","stringify","alert","delta","map","j","sort","a","b","src","key","defaultProps","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1a518bef.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Joke.css';\r\n\r\nexport class Joke extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.getColor = this.getColor.bind(this);\r\n    this.getEmoji = this.getEmoji.bind(this);\r\n  }\r\n\r\n  getColor() {\r\n    if (this.props.votes >= 15) {\r\n      return \"#4CAF50\";\r\n    } else if (this.props.votes >= 12) {\r\n      return \"#8BC34A\";\r\n    } else if (this.props.votes >= 9) {\r\n      return \"#CDDC39\";\r\n    } else if (this.props.votes >= 6) {\r\n      return \"#FFEB3B\";\r\n    } else if (this.props.votes >= 3) {\r\n      return \"#FFC107\";\r\n    } else if (this.props.votes >= 0) {\r\n      return \"#FF9800\";\r\n    } else {\r\n      return \"#f44336\";\r\n    }\r\n  }\r\n  getEmoji() {\r\n    if (this.props.votes >= 15) {\r\n      return \"em em-rolling_on_the_floor_laughing\";\r\n    } else if (this.props.votes >= 12) {\r\n      return \"em em-laughing\";\r\n    } else if (this.props.votes >= 9) {\r\n      return \"em em-smiley\";\r\n    } else if (this.props.votes >= 6) {\r\n      return \"em em-slightly_smiling_face\";\r\n    } else if (this.props.votes >= 3) {\r\n      return \"em em-neutral_face\";\r\n    } else if (this.props.votes >= 0) {\r\n      return \"em em-confused\";\r\n    } else {\r\n      return \"em em-angry\";\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div className='Joke'>\r\n        <div className='Joke-Button'>\r\n          <i className='fas fa-arrow-up' onClick={this.props.upvote}></i>\r\n          <span className='Joke-Votes' style={{border: `3px solid ${this.getColor()}`}}>{this.props.votes}</span>\r\n          <i className='fas fa-arrow-down' onClick={this.props.downvote}></i>\r\n        </div>\r\n        <div className='Joke-Text'>{this.props.joke}</div>\r\n        <div className='Joke-Emoji'>\r\n          <i className={this.getEmoji()}></i>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Joke\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport './JokeList.css';\r\nimport Joke from './Joke'\r\n\r\nexport class JokeList extends Component {\r\n  static defaultProps={\r\n    numJokes: 10,\r\n  }\r\n  constructor(props){\r\n    super(props);\r\n    this.state ={\r\n      jokes: JSON.parse(window.localStorage.getItem('jokes') || '[]'),\r\n      loading: false,\r\n    }\r\n    this.seenJokes = new Set(this.state.jokes.text)\r\n    this.handleVote = this.handleVote.bind(this);\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  componentDidMount(){\r\n    if(this.state.jokes === 0){\r\n      this.getJokes()\r\n    }\r\n  }\r\n\r\n  async getJokes(){\r\n    try {\r\n      let jokes = [];\r\n        while(jokes.length < this.props.numJokes){\r\n        let res = await axios.get('https://icanhazdadjoke.com/', {headers: {Accept: 'application/json'}});\r\n        if(!this.seenJokes.has(res.data.joke)){\r\n          jokes.push({text: res.data.joke, votes: 0, id: uuidv4()});\r\n        } else {\r\n          console.log('Duplicate Joke')\r\n        }\r\n      }\r\n      this.setState(state => ({\r\n        jokes: [...state.jokes, ...jokes],\r\n        loading: false,\r\n      }))\r\n      window.localStorage.setItem('jokes', JSON.stringify(jokes));\r\n    } catch(err) {\r\n      alert(err);\r\n      this.setState({loading: false})\r\n    }\r\n  }\r\n\r\n  handleVote(id, delta){\r\n    this.setState(state => ({\r\n      jokes: state.jokes.map(j => j.id === id ? {...j, votes: j.votes + delta} : j)\r\n    }), window.localStorage.setItem('jokes', JSON.stringify(this.state.jokes)) \r\n    )\r\n  }\r\n\r\n  handleClick(){\r\n    this.setState({loading: true}, this.getJokes)\r\n  }\r\n\r\n  render() {\r\n    if(this.state.loading){\r\n      return(\r\n        <div className='JokeList-Spinner'>\r\n          <i className='far fa-8x fa-laugh fa-spin'/>\r\n          <h1 className='JokeList-Title'>Loading...</h1>\r\n        </div>\r\n      )\r\n    } \r\n    let jokes = this.state.jokes.sort((a, b) => b.votes - a.votes)\r\n    return (\r\n      <div className='JokeList'>\r\n        <div className='JokeList-Sidebar'>\r\n          <h1 className='JokeList-Title'><span>Dad</span> Jokes...</h1>\r\n          <img src='https://assets.dryicons.com/uploads/icon/svg/8927/0eb14c71-38f2-433a-bfc8-23d9c99b3647.svg' />\r\n          <button className='JokesList-GetMore' onClick={this.handleClick}>Get New Jokes</button>\r\n        </div>\r\n        \r\n        <div className='JokeList-Joke'>\r\n          {jokes.map(joke => <Joke votes={joke.votes} joke={joke.text} key={joke.id} upvote={() => this.handleVote(joke.id, 1)} downvote={() => this.handleVote(joke.id, -1)}/>)}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default JokeList\r\n","import React from 'react';\nimport './App.css';\nimport JokeList from './JokeList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <JokeList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}